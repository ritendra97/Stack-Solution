//Next Greatest Element Stack
package stack;
import java.util.*;
import java.util.Collections;
public class NextGreatest 
{
	 
    public void NGE(int nums[])
    {
    	List<Integer> v = new ArrayList<>(); 
    	Stack<Integer> s = new Stack<Integer>();
    	for(int i = nums.length-1;i>=0;i--)
    	{
    		if(s.size()==0)
    			v.add(-1);
    		else if(s.size()>0 && nums[i]>=s.peek())
    		{
    			v.add(nums[i]);
    		}
    		else if(s.size()>0 && nums[i]<=s.peek())
    		{
    			while(s.size()==0 && nums[i]<s.peek())
    			{
    				s.pop();
    			}
    			if(s.size()==0)
    			{
    				v.add(-1);
    			}
    			else
    			{
    				v.add(s.pop());
    			}
    		}
    		s.push(nums[i]);
    	}
    	Collections.reverse(v);
    	System.out.println("The Vector is: " +v);
    }
	public static void main(String[] args) 
	{
		NextGreatest n1 = new NextGreatest();
         int nums[]= {11, 13, 21, 3};	
         n1.NGE(nums);
    }

}
// GFG Solution
class solve{
    public static long[] nextLargerElement(long[] arr, int n) 
    {
        Stack<Long> s = new Stack<>();
        long ans[] = new long[n];
        for(int i=n-1;i>=0;i--)
        {
            while (!s.isEmpty() && s.peek() <= arr[i])  
                 s.pop();
            if(s.isEmpty())
            {
                ans[i]=-1;
            }
            else
            {
                ans[i]=s.peek();
            }
            s.push(arr[i]);
        }
        return ans;
    } 
}
